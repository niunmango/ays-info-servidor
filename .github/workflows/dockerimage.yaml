name: Crear y Publicar la imagen Docker en ghcr.io

on:
  push:
    branches:
      - main 

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATE: ${{ format('{0}.{1}.{2}', github.event.repository.updated_at.Year, github.event.repository.updated_at.Month, github.event.repository.updated_at.Day) }}
      REPO: ${{ format('{0}', github.repository) }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login en GitHub Container Registry (ghcr.io)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=schedule,pattern={{date 'YYYY.MM.DD'}}
          type=raw,value=latest

    - name: Build y push de la imagen Docker
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max

    - name: Escanear vulnerabilidades
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Subir resultados del análisis
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Login en GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Probar la imagen
      run: |
        docker pull ghcr.io/${{ github.repository }}:latest
        docker run --rm -d -p 5000:5000 --name test-container ghcr.io/${{ github.repository }}:latest
        sleep 10
        curl -s http://localhost:5000 || exit 1
        docker stop test-container
          
    - name: Build y push de la imagen Docker
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ghcr.io/${{ env.REPO }}:${{ env.DATE }},ghcr.io/${{ env.REPO }}:latest

  deploy-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Probar si un contenedor creado con la imagen da una página en el puerto 5000
      run: |
        docker run --rm -d -p 5000:5000 ghcr.io/${{ env.REPO }}:${{ env.DATE }}
        sleep 10
        curl --max-time 10 --retry 5 http://localhost:5000